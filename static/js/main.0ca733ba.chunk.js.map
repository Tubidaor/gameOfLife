{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","pupulateArray","numCol","numRow","array","styleAlive","backgroundColor","styleDead","i","fill","j","push","id","state","alive","className","style","dead","setState","gridStart","handleClick","running","randomStart","gridInitialState","preGrid","coin","Math","floor","random","length","playLife","cell","emptyGrid","sum","row","col","neighbors","undefined","filter","neigh","grid","gridDiv","gridRun","start","continuousPlay","setInterval","stop","clearInterval","screenHeight","screenWidth","height","window","innerHeight","width","innerWidth","rows","cols","this","console","log","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ca733ba.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gridStart: [],\n      gridInitialState: [],\n      gridRun: [],\n      running: false,\n      screenHeight: null,\n      screenWidth: null,\n    }\n  }\n  \n\n  pupulateArray = (numCol, numRow) => {\n    let array = []\n    let styleAlive = {\n      backgroundColor: \"white\"\n    }\n    let styleDead = {\n      backgroundColor: \"black\"\n    }\n    for(let i = 0; i < numCol; i++) {\n      let fill =[]\n      for(let j = 0; j < numRow; j++) {\n        fill.push({\n          id:`${i}${j}`,\n          state: 0,\n          alive: () => {\n          return (\n            <div className={`node div${i}${j}`} style={styleAlive}/>\n          )},\n          dead: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleDead}/>\n            )},\n        })\n      }\n      array.push(fill)\n      this.setState({\n        gridStart: array,\n      })\n  }\n  }\n\n  handleClick = () => {\n    \n    this.setState({\n      running: !this.state.running,\n    })\n    this.pupulateArray(50, 100)\n  }\n\n\n  randomStart = () => {\n    let { gridStart } = this.state\n    let gridInitialState = []\n    let styleAlive = {\n      backgroundColor: \"white\"\n    }\n    let styleDead = {\n      backgroundColor: \"black\"\n    }\n\n    for(let i = 0; i < gridStart.length; i++) {\n      let preGrid = []\n  \n      for(let j = 0; j < gridStart[i].length; j++) {\n        let coin = Math.floor(Math.random() * 2);\n        if(coin === 0) {\n          preGrid.push(\n            {\n              id:`${i}${j}`,\n              state: 0,\n              alive: () => {\n              return (\n                <div className={`node div${i}${j}`} style={styleAlive}/>\n              )},\n              dead: () => {\n                return (\n                  <div className={`node div${i}${j}`} style={styleDead}/>\n                )},\n            }\n        )\n        }\n        if(coin === 1) {\n          preGrid.push(\n          {\n            id:`${i}${j}`,\n            state: 1,\n            alive: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleAlive}/>\n            )},\n            dead: () => {\n              return (\n                <div className={`node div${i}${j}`} style={styleDead}/>\n              )},\n          })\n        }\n        \n      }\n      gridInitialState.push(preGrid)\n    }\n    this.setState({\n      gridInitialState\n    })\n\n  }\n\n  playLife = () => {\n  \n  let cell = this.state.gridInitialState\n  let emptyGrid = []\n\n  function sum(row,col) {\n    let nTopL = cell[row-1] === undefined|| cell[row-1][col-1] === undefined? 0: cell[row-1][col-1].state;\n    let nTop = cell[row-1] === undefined || cell[row-1][col] === undefined? 0: cell[row-1][col].state;\n    let nTopR = cell[row-1] === undefined || cell[row-1][col+1] === undefined? 0: cell[row-1][col+1].state;\n    let nLeft = cell[row] === undefined || cell[row][col-1] === undefined? 0: cell[row][col-1].state;\n    let nRight = cell[row] === undefined || cell[row][col+1] === undefined? 0: cell[row][col+1].state;\n    let nBotL = cell[row+1] === undefined || cell[row+1][col-1] === undefined? 0: cell[row+1][col-1].state;\n    let nBot = cell[row+1] === undefined || cell[row+1][col] === undefined? 0: cell[row+1][col].state;\n    let nBotR = cell[row+1] === undefined || cell[row+1][col+1] === undefined? 0: cell[row+1][col+1].state;\n    const neighbors = [nTopL, nTop, nTopR, nLeft, nRight, nBotL, nBot, nBotR]\n    let sum = 0\n    \n    neighbors.filter(neigh => {return neigh !== undefined})\n\n    for(let i = 0; i < neighbors.length; i++) {\n      sum = sum + neighbors[i]\n    }\n\n    return sum\n  }\n  let styleAlive = {\n    backgroundColor: \"white\"\n  }\n  let styleDead = {\n    backgroundColor: \"black\"\n  }\n  for(let i = 0; i < cell.length; i++) {\n    let preGrid = []\n    for(let j = 0; j < cell[i].length; j++) {\n\n      if(sum(i,j) < 2) {\n        preGrid.push(\n          {\n            id:`${i}${j}`,\n            state: 0,\n            alive: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleAlive}/>\n            )},\n            dead: () => {\n              return (\n                <div className={`node div${i}${j}`} style={styleDead}/>\n              )},\n          }\n      )\n    }\n    if(sum(i,j) === 3 ) {\n      preGrid.push(\n        {\n          id:`${i}${j}`,\n          state: 1,\n          alive: () => {\n          return (\n            <div className={`node div${i}${j}`} style={styleAlive}/>\n          )},\n          dead: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleDead}/>\n            )},\n        }\n    )\n    }\n    if(sum(i,j) === 2 && cell[i][j].state === 1) {\n      preGrid.push(\n        {\n          id:`${i}${j}`,\n          state: 1,\n          alive: () => {\n          return (\n            <div className={`node div${i}${j}`} style={styleAlive}/>\n          )},\n          dead: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleDead}/>\n            )},\n        }\n    )\n    }\n    if(sum(i,j) > 3) {\n      preGrid.push(\n        {\n          id:`${i}${j}`,\n          state: 0,\n          alive: () => {\n          return (\n            <div className={`node div${i}${j}`} style={styleAlive}/>\n          )},\n          dead: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleDead}/>\n            )},\n        }\n    )\n    } \n    if(sum(i,j) === 2 && cell[i][j].state === 0) {\n      preGrid.push(\n        {\n          id:`${i}${j}`,\n          state: 0,\n          alive: () => {\n          return (\n            <div className={`node div${i}${j}`} style={styleAlive}/>\n          )},\n          dead: () => {\n            return (\n              <div className={`node div${i}${j}`} style={styleDead}/>\n            )},\n        }\n    )\n    }\n  }\n  emptyGrid.push(preGrid)\n  this.setState({\n    gridInitialState: emptyGrid\n  })\n}\n\nthis.grid(emptyGrid)\n}\n\ngrid = (array) => {\n    let gridDiv = []\n    for(let i = 0; i < array.length; i++) {\n      let cell = []\n      for(let j = 0; j < array[i].length; j++){\n        if(array[i][j].state === 1) {\n        cell.push(array[i][j].alive())\n        }\n        if(array[i][j].state === 0) {\n        cell.push(array[i][j].dead())\n        }\n      }\n      gridDiv.push(cell)\n    }\n    this.setState({\n      gridRun: gridDiv,\n    })\n}\n\n\nstart = () => {\n  this.continuousPlay = setInterval(this.playLife, 1000)\n}\nstop = () => { \n  clearInterval(this.continuousPlay)\n}\n\ncomponentDidMount() {\n  let height = window.innerHeight\n  let width = window.innerWidth\n  let rows = () => {\n    if(width/height > 1.5) {\n      return Math.floor((window.innerHeight-150)/10)\n    }\n    return Math.floor((width-20)/10)\n  }\n  let cols = () => {\n    if(width/height > 1.5) {\n      return Math.floor((width-100)/10)\n    }\n    return rows ()\n  }\n  this.setState({\n    screenHeight: rows() * 10,\n    screenWidth: cols() * 10,\n  })\n  this.pupulateArray(rows(), cols())\n  console.log(rows(), cols())\n}\n  render() {\n  let style = {\n    width: this.state.screenWidth,\n    height: this.state.screenHeight,\n  }\n \n  return (\n    <div className=\"App\">\n      <h1>John Conway's Game of Life</h1>\n      <div className=\"buttonsContainer\">\n        {/* <button onClick={this.handleClick}>Set up grid</button> */}\n        <button className={\"randomStart\"} onClick={this.randomStart} > Random Start </button>\n        <button onClick={this.start}> Start </button>\n        <button onClick={this.stop}> Stop </button>\n        <button onClick={this.playLife}> Step </button>\n      </div>\n      <div className=\"gridContainer\" style={style}>\n        {this.state.gridRun}\n      </div>\n    </div>\n  );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}