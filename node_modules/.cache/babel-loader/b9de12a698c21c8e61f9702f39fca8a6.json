{"ast":null,"code":"var _jsxFileName = \"/Users/juanbaltazar/Projects/GameOfLife/gameoflife/src/App.js\";\nimport React from 'react';\nimport './App.css';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridStart: [],\n      running: false\n    };\n  }\n\n  render() {\n    pupulateArray = (numCol, numRow) => {\n      let array = [];\n      let styleAlive = {\n        backgroundColor: \"blue\"\n      };\n      let styleDead = {\n        backgroundColor: \"white\"\n      };\n\n      for (let i = 0; i < numCol; i++) {\n        let fill = [];\n\n        for (let j = 0; j < numRow; j++) {\n          fill.push({\n            id: `${i}${j}`,\n            state: 0,\n            alive: () => {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: `div div${i}${j}`,\n                style: styleAlive,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 15\n                }\n              });\n            },\n            dead: () => {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: `div div${i}${j}`,\n                style: styleDead,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 17\n                }\n              });\n            }\n          });\n        }\n\n        array.push(fill);\n        this.setState({\n          gridStart: array\n        });\n      }\n\n      console.log(this.state.gridStart);\n    };\n\n    handleClick = () => {\n      this.populateArray(10, 10);\n      this.setState({\n        running: !this.state.running\n      });\n    }; //16377\n\n\n    function randomStart(e) {\n      e.preventDefault();\n      let {\n        gridStart\n      } = this.state;\n      let gridInitialState = [];\n      let styleAlive = {\n        backgroundColor: \"blue\"\n      };\n      let styleDead = {\n        backgroundColor: \"white\"\n      };\n\n      for (let i = 0; i < gridStart.length; i++) {\n        for (let j = 0; j < gridStart[i].length; j++) {\n          let coin = Math.floor(Math.random() * 2);\n          console.log(coin);\n\n          if (coin === 0) {\n            gridInitialState.push({\n              id: `${i}${j}`,\n              state: 0,\n              alive: () => {\n                return /*#__PURE__*/React.createElement(\"div\", {\n                  className: `div div${i}${j}`,\n                  style: styleAlive,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 19\n                  }\n                });\n              },\n              dead: () => {\n                return /*#__PURE__*/React.createElement(\"div\", {\n                  className: `div div${i}${j}`,\n                  style: styleDead,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 21\n                  }\n                });\n              }\n            });\n\n            if (coin === 1) {\n              gridInitialState.push({\n                id: `${i}${j}`,\n                state: 1,\n                alive: () => {\n                  return /*#__PURE__*/React.createElement(\"div\", {\n                    className: `div div${i}${j}`,\n                    style: styleAlive,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 17\n                    }\n                  });\n                },\n                dead: () => {\n                  return /*#__PURE__*/React.createElement(\"div\", {\n                    className: `div div${i}${j}`,\n                    style: styleDead,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 19\n                    }\n                  });\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    function playLife(e) {\n      e.preventDefault();\n      let cell = this.state.gridInitialState;\n\n      function sum(row, col) {\n        console.log(cell);\n        let nTopL = row === 0 || col === 0 ? 0 : cell[row - 1][col - 1].state;\n        let nTop = row === 0 ? 0 : cell[row - 1][col].state;\n        let nTopR = row === 0 || col > cell.length - 2 ? 0 : cell[row - 1][col + 1].state;\n        let nLeft = col === 0 ? 0 : cell[row][col - 1].state;\n        let nRight = col > cell.length - 2 ? 0 : cell[row][col + 1].state;\n        let nBotL = row > cell.length - 2 || col === 0 ? 0 : cell[row + 1][col - 1].state;\n        let nBot = row > cell.length - 2 ? 0 : cell[row + 1][col].state;\n        let nBotR = row > cell.length - 2 || col > cell.length - 2 ? 0 : cell[row + 1][col + 1].state;\n        const neighbors = [nTopL, nTop, nTopR, nLeft, nRight, nBotL, nBot, nBotR];\n        let sum = 0;\n        neighbors.filter(neigh => {\n          return neigh !== undefined;\n        });\n        console.log(neighbors);\n\n        for (let i = 0; i < neighbors.length; i++) {\n          sum = sum + neighbors[i];\n        }\n\n        console.log(sum);\n        return sum;\n      }\n\n      sum(2, 1);\n\n      for (let i = 0; i < cell.length; i++) {\n        for (let j = 0; j < cell[i].length; j++) {\n          if (sum(i, j) < 2) {\n            cell[i][j].state = 0;\n          }\n\n          if (cell[i][j].state === 0 && sum(i, j) === 3) {\n            cell[i][j].state = 1;\n          }\n\n          if (sum(i, j) > 3) {\n            cell[i][j].state = 0;\n          }\n        }\n      }\n\n      console.log(cell);\n      grid(cell);\n    }\n\n    let grid = array => {\n      while (this.state.running === !false) {\n        let gridDiv = [];\n\n        for (let i = 0; i < array.length; i++) {\n          let cell = [];\n\n          for (let j = 0; j < array[i].length; j++) {\n            if (array[i][j].state === 1) {\n              cell.push(array[i][j].alive());\n            }\n\n            if (array[i][j].state === 0) {\n              cell.push(array[i][j].dead());\n            } else {\n              j++;\n            }\n          }\n\n          gridDiv.push(cell);\n        }\n\n        console.log(\"gridStateUpdateRan\");\n        this.setState({\n          grid: gridDiv\n        });\n      }\n    }; // pupulateArray(10,10)\n    // randomStart()\n    // let visualGrid = this.state.grid\n    // visualGrid.map()\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, \"Click me\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"randomStart\",\n      onClick: e => randomStart(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    }, \" Random Start \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => playLife(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }, \" start \"), this.state.grid);\n  }\n\n}","map":{"version":3,"sources":["/Users/juanbaltazar/Projects/GameOfLife/gameoflife/src/App.js"],"names":["React","App","Component","constructor","props","state","gridStart","running","render","pupulateArray","numCol","numRow","array","styleAlive","backgroundColor","styleDead","i","fill","j","push","id","alive","dead","setState","console","log","handleClick","populateArray","randomStart","e","preventDefault","gridInitialState","length","coin","Math","floor","random","playLife","cell","sum","row","col","nTopL","nTop","nTopR","nLeft","nRight","nBotL","nBot","nBotR","neighbors","filter","neigh","undefined","grid","gridDiv"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAIA,eAAe,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAGDC,EAAAA,MAAM,GAAG;AACPC,IAAAA,aAAa,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAClC,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,UAAU,GAAG;AACfC,QAAAA,eAAe,EAAE;AADF,OAAjB;AAGA,UAAIC,SAAS,GAAG;AACdD,QAAAA,eAAe,EAAE;AADH,OAAhB;;AAGA,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,MAAnB,EAA2BM,CAAC,EAA5B,EAAgC;AAC9B,YAAIC,IAAI,GAAE,EAAV;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,MAAnB,EAA2BO,CAAC,EAA5B,EAAgC;AAC9BD,UAAAA,IAAI,CAACE,IAAL,CAAU;AACRC,YAAAA,EAAE,EAAE,GAAEJ,CAAE,GAAEE,CAAE,EADJ;AAERb,YAAAA,KAAK,EAAE,CAFC;AAGRgB,YAAAA,KAAK,EAAE,MAAM;AACb,kCACE;AAAK,gBAAA,SAAS,EAAG,UAASL,CAAE,GAAEE,CAAE,EAAhC;AAAmC,gBAAA,KAAK,EAAEL,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAEE,aANM;AAORS,YAAAA,IAAI,EAAE,MAAM;AACV,kCACE;AAAK,gBAAA,SAAS,EAAG,UAASN,CAAE,GAAEE,CAAE,EAAhC;AAAmC,gBAAA,KAAK,EAAEH,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAEE;AAVI,WAAV;AAYD;;AACDH,QAAAA,KAAK,CAACO,IAAN,CAAWF,IAAX;AACA,aAAKM,QAAL,CAAc;AACZjB,UAAAA,SAAS,EAAEM;AADC,SAAd;AAGH;;AACDY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAL,CAAWC,SAAvB;AACC,KA9BD;;AAgCAoB,IAAAA,WAAW,GAAG,MAAM;AAClB,WAAKC,aAAL,CAAmB,EAAnB,EAAsB,EAAtB;AACA,WAAKJ,QAAL,CAAc;AACZhB,QAAAA,OAAO,EAAE,CAAC,KAAKF,KAAL,CAAWE;AADT,OAAd;AAGD,KALD,CAjCO,CA0CT;;;AAGE,aAASqB,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,MAAAA,CAAC,CAACC,cAAF;AACA,UAAI;AAACxB,QAAAA;AAAD,UAAc,KAAKD,KAAvB;AACA,UAAI0B,gBAAgB,GAAG,EAAvB;AACA,UAAIlB,UAAU,GAAG;AACfC,QAAAA,eAAe,EAAE;AADF,OAAjB;AAGA,UAAIC,SAAS,GAAG;AACdD,QAAAA,eAAe,EAAE;AADH,OAAhB;;AAIA,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,SAAS,CAAC0B,MAA7B,EAAqChB,CAAC,EAAtC,EAA0C;AAExC,aAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,SAAS,CAACU,CAAD,CAAT,CAAagB,MAAhC,EAAwCd,CAAC,EAAzC,EAA6C;AAC3C,cAAIe,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAX;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;;AACA,cAAGA,IAAI,KAAK,CAAZ,EAAe;AACbF,YAAAA,gBAAgB,CAACZ,IAAjB,CACE;AACEC,cAAAA,EAAE,EAAE,GAAEJ,CAAE,GAAEE,CAAE,EADd;AAEEb,cAAAA,KAAK,EAAE,CAFT;AAGEgB,cAAAA,KAAK,EAAE,MAAM;AACb,oCACE;AAAK,kBAAA,SAAS,EAAG,UAASL,CAAE,GAAEE,CAAE,EAAhC;AAAmC,kBAAA,KAAK,EAAEL,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAEE,eANJ;AAOES,cAAAA,IAAI,EAAE,MAAM;AACV,oCACE;AAAK,kBAAA,SAAS,EAAG,UAASN,CAAE,GAAEE,CAAE,EAAhC;AAAmC,kBAAA,KAAK,EAAEH,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAEE;AAVN,aADF;;AAcF,gBAAGkB,IAAI,KAAK,CAAZ,EAAe;AACbF,cAAAA,gBAAgB,CAACZ,IAAjB,CACA;AACEC,gBAAAA,EAAE,EAAE,GAAEJ,CAAE,GAAEE,CAAE,EADd;AAEEb,gBAAAA,KAAK,EAAE,CAFT;AAGEgB,gBAAAA,KAAK,EAAE,MAAM;AACb,sCACE;AAAK,oBAAA,SAAS,EAAG,UAASL,CAAE,GAAEE,CAAE,EAAhC;AAAmC,oBAAA,KAAK,EAAEL,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAEE,iBANJ;AAOES,gBAAAA,IAAI,EAAE,MAAM;AACV,sCACE;AAAK,oBAAA,SAAS,EAAG,UAASN,CAAE,GAAEE,CAAE,EAAhC;AAAmC,oBAAA,KAAK,EAAEH,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAEE;AAVN,eADA;AAYG;AACJ;AACF;AACF;AACF;;AAED,aAASsB,QAAT,CAAkBR,CAAlB,EAAqB;AACnBA,MAAAA,CAAC,CAACC,cAAF;AAEA,UAAIQ,IAAI,GAAG,KAAKjC,KAAL,CAAW0B,gBAAtB;;AACF,eAASQ,GAAT,CAAaC,GAAb,EAAiBC,GAAjB,EAAsB;AACpBjB,QAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AAEA,YAAII,KAAK,GAAGF,GAAG,KAAK,CAAR,IAAaC,GAAG,KAAK,CAArB,GAAwB,CAAxB,GAA2BH,IAAI,CAACE,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAG,GAAC,CAAhB,EAAmBpC,KAA1D;AACA,YAAIsC,IAAI,GAAGH,GAAG,KAAM,CAAT,GAAY,CAAZ,GAAeF,IAAI,CAACE,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAZ,EAAiBpC,KAA3C;AACA,YAAIuC,KAAK,GAAIJ,GAAG,KAAK,CAAT,IAAgBC,GAAG,GAAGH,IAAI,CAACN,MAAL,GAAY,CAAlC,GAAsC,CAAtC,GAAyCM,IAAI,CAACE,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAG,GAAC,CAAhB,EAAmBpC,KAAxE;AACA,YAAIwC,KAAK,GAAGJ,GAAG,KAAK,CAAR,GAAW,CAAX,GAAcH,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAG,GAAC,CAAd,EAAiBpC,KAA3C;AACA,YAAIyC,MAAM,GAAGL,GAAG,GAAGH,IAAI,CAACN,MAAL,GAAY,CAAlB,GAAqB,CAArB,GAAwBM,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAG,GAAC,CAAd,EAAiBpC,KAAtD;AACA,YAAI0C,KAAK,GAAIP,GAAG,GAAGF,IAAI,CAACN,MAAL,GAAY,CAAnB,IAA0BS,GAAG,KAAK,CAAlC,GAAsC,CAAtC,GAAyCH,IAAI,CAACE,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAG,GAAC,CAAhB,EAAmBpC,KAAxE;AACA,YAAI2C,IAAI,GAAGR,GAAG,GAAGF,IAAI,CAACN,MAAL,GAAY,CAAlB,GAAqB,CAArB,GAAwBM,IAAI,CAACE,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAZ,EAAiBpC,KAApD;AACA,YAAI4C,KAAK,GAAIT,GAAG,GAAGF,IAAI,CAACN,MAAL,GAAY,CAAnB,IAA0BS,GAAG,GAAGH,IAAI,CAACN,MAAL,GAAY,CAA5C,GAAgD,CAAhD,GAAmDM,IAAI,CAACE,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAG,GAAC,CAAhB,EAAmBpC,KAAlF;AACA,cAAM6C,SAAS,GAAG,CAACR,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,KAApC,EAA2CC,IAA3C,EAAiDC,KAAjD,CAAlB;AACA,YAAIV,GAAG,GAAG,CAAV;AAEAW,QAAAA,SAAS,CAACC,MAAV,CAAiBC,KAAK,IAAI;AAAC,iBAAOA,KAAK,KAAKC,SAAjB;AAA2B,SAAtD;AACA7B,QAAAA,OAAO,CAACC,GAAR,CAAYyB,SAAZ;;AACA,aAAI,IAAIlC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGkC,SAAS,CAAClB,MAA7B,EAAqChB,CAAC,EAAtC,EAA0C;AACxCuB,UAAAA,GAAG,GAAGA,GAAG,GAAGW,SAAS,CAAClC,CAAD,CAArB;AACD;;AACDQ,QAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACA,eAAOA,GAAP;AACD;;AACDA,MAAAA,GAAG,CAAC,CAAD,EAAG,CAAH,CAAH;;AACA,WAAI,IAAIvB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,IAAI,CAACN,MAAxB,EAAgChB,CAAC,EAAjC,EAAqC;AAEnC,aAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGoB,IAAI,CAACtB,CAAD,CAAJ,CAAQgB,MAA3B,EAAmCd,CAAC,EAApC,EAAwC;AACtC,cAAGqB,GAAG,CAACvB,CAAD,EAAGE,CAAH,CAAH,GAAW,CAAd,EAAiB;AACfoB,YAAAA,IAAI,CAACtB,CAAD,CAAJ,CAAQE,CAAR,EAAWb,KAAX,GAAmB,CAAnB;AACD;;AACD,cAAGiC,IAAI,CAACtB,CAAD,CAAJ,CAAQE,CAAR,EAAWb,KAAX,KAAqB,CAArB,IAA0BkC,GAAG,CAACvB,CAAD,EAAGE,CAAH,CAAH,KAAa,CAA1C,EAA6C;AAC3CoB,YAAAA,IAAI,CAACtB,CAAD,CAAJ,CAAQE,CAAR,EAAWb,KAAX,GAAmB,CAAnB;AACD;;AACD,cAAGkC,GAAG,CAACvB,CAAD,EAAGE,CAAH,CAAH,GAAW,CAAd,EAAiB;AACfoB,YAAAA,IAAI,CAACtB,CAAD,CAAJ,CAAQE,CAAR,EAAWb,KAAX,GAAmB,CAAnB;AACD;AACF;AACF;;AACDmB,MAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AACAgB,MAAAA,IAAI,CAAChB,IAAD,CAAJ;AACD;;AAED,QAAIgB,IAAI,GAAI1C,KAAD,IAAW;AACpB,aAAM,KAAKP,KAAL,CAAWE,OAAX,KAAuB,CAAC,KAA9B,EAAqC;AACnC,YAAIgD,OAAO,GAAG,EAAd;;AACA,aAAI,IAAIvC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,KAAK,CAACoB,MAAzB,EAAiChB,CAAC,EAAlC,EAAsC;AACpC,cAAIsB,IAAI,GAAG,EAAX;;AACA,eAAI,IAAIpB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,KAAK,CAACI,CAAD,CAAL,CAASgB,MAA5B,EAAoCd,CAAC,EAArC,EAAwC;AACtC,gBAAGN,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,EAAYb,KAAZ,KAAsB,CAAzB,EAA4B;AAC5BiC,cAAAA,IAAI,CAACnB,IAAL,CAAUP,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,EAAYG,KAAZ,EAAV;AACC;;AACD,gBAAGT,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,EAAYb,KAAZ,KAAsB,CAAzB,EAA4B;AAC5BiC,cAAAA,IAAI,CAACnB,IAAL,CAAUP,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,EAAYI,IAAZ,EAAV;AACC,aAFD,MAEM;AAAEJ,cAAAA,CAAC;AAAG;AACb;;AACDqC,UAAAA,OAAO,CAACpC,IAAR,CAAamB,IAAb;AACD;;AACDd,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,aAAKF,QAAL,CAAc;AACZ+B,UAAAA,IAAI,EAAEC;AADM,SAAd;AAGD;AACF,KApBD,CA5IS,CAmKP;AACA;AAEA;AACA;;;AAIF,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAE,KAAK7B,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,MAAA,SAAS,EAAE,aAAnB;AAAkC,MAAA,OAAO,EAAEG,CAAC,IAAID,WAAW,CAACC,CAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,eAGE;AAAQ,MAAA,OAAO,EAAEA,CAAC,IAAIQ,QAAQ,CAACR,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAIG,KAAKxB,KAAL,CAAWiD,IAJd,CADF;AAQC;;AA7L8C","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gridStart: [],\n      running: false,\n    }\n  }\n\n  \n  render() {\n    pupulateArray = (numCol, numRow) => {\n      let array = []\n      let styleAlive = {\n        backgroundColor: \"blue\"\n      }\n      let styleDead = {\n        backgroundColor: \"white\"\n      }\n      for(let i = 0; i < numCol; i++) {\n        let fill =[]\n        for(let j = 0; j < numRow; j++) {\n          fill.push({\n            id:`${i}${j}`,\n            state: 0,\n            alive: () => {\n            return (\n              <div className={`div div${i}${j}`} style={styleAlive}/>\n            )},\n            dead: () => {\n              return (\n                <div className={`div div${i}${j}`} style={styleDead}/>\n              )},\n          })\n        }\n        array.push(fill)\n        this.setState({\n          gridStart: array\n        })\n    }\n    console.log(this.state.gridStart)\n    }\n  \n    handleClick = () => {\n      this.populateArray(10,10);\n      this.setState({\n        running: !this.state.running,\n      })\n    }\n  \n  \n  \n  //16377\n  \n\n    function randomStart(e) {\n      e.preventDefault();\n      let {gridStart} = this.state\n      let gridInitialState = []\n      let styleAlive = {\n        backgroundColor: \"blue\"\n      }\n      let styleDead = {\n        backgroundColor: \"white\"\n      }\n\n      for(let i = 0; i < gridStart.length; i++) {\n    \n        for(let j = 0; j < gridStart[i].length; j++) {\n          let coin = Math.floor(Math.random() * 2);\n          console.log(coin)\n          if(coin === 0) {\n            gridInitialState.push(\n              {\n                id:`${i}${j}`,\n                state: 0,\n                alive: () => {\n                return (\n                  <div className={`div div${i}${j}`} style={styleAlive}/>\n                )},\n                dead: () => {\n                  return (\n                    <div className={`div div${i}${j}`} style={styleDead}/>\n                  )},\n              }\n          )\n          if(coin === 1) {\n            gridInitialState.push(\n            {\n              id:`${i}${j}`,\n              state: 1,\n              alive: () => {\n              return (\n                <div className={`div div${i}${j}`} style={styleAlive}/>\n              )},\n              dead: () => {\n                return (\n                  <div className={`div div${i}${j}`} style={styleDead}/>\n                )},\n            })}\n          }\n        }\n      }\n    }\n\n    function playLife(e) {\n      e.preventDefault();\n\n      let cell = this.state.gridInitialState\n    function sum(row,col) {\n      console.log(cell)\n      \n      let nTopL = row === 0 || col === 0? 0: cell[row-1][col-1].state;\n      let nTop = row  === 0? 0: cell[row-1][col].state;\n      let nTopR = (row === 0) || (col > cell.length-2)? 0: cell[row-1][col+1].state;\n      let nLeft = col === 0? 0: cell[row][col-1].state;\n      let nRight = col > cell.length-2? 0: cell[row][col+1].state;\n      let nBotL = (row > cell.length-2) || (col === 0)? 0: cell[row+1][col-1].state;\n      let nBot = row > cell.length-2? 0: cell[row+1][col].state;\n      let nBotR = (row > cell.length-2) || (col > cell.length-2)? 0: cell[row+1][col+1].state;\n      const neighbors = [nTopL, nTop, nTopR, nLeft, nRight, nBotL, nBot, nBotR]\n      let sum = 0\n      \n      neighbors.filter(neigh => {return neigh !== undefined})\n      console.log(neighbors)\n      for(let i = 0; i < neighbors.length; i++) {\n        sum = sum + neighbors[i]\n      }\n      console.log(sum)\n      return sum\n    }\n    sum(2,1)\n    for(let i = 0; i < cell.length; i++) {\n  \n      for(let j = 0; j < cell[i].length; j++) {\n        if(sum(i,j) < 2) {\n          cell[i][j].state = 0\n        }\n        if(cell[i][j].state === 0 && sum(i,j) === 3) {\n          cell[i][j].state = 1\n        }\n        if(sum(i,j) > 3) {\n          cell[i][j].state = 0\n        }\n      }\n    }\n    console.log(cell)\n    grid(cell)\n  }\n\n  let grid = (array) => {\n    while(this.state.running === !false) {\n      let gridDiv = []\n      for(let i = 0; i < array.length; i++) {\n        let cell = []\n        for(let j = 0; j < array[i].length; j++){\n          if(array[i][j].state === 1) {\n          cell.push(array[i][j].alive())\n          }\n          if(array[i][j].state === 0) {\n          cell.push(array[i][j].dead())\n          }else { j++}\n        }\n        gridDiv.push(cell)\n      }\n      console.log(\"gridStateUpdateRan\")\n      this.setState({\n        grid: gridDiv,\n      })\n    }\n  }\n\n\n    // pupulateArray(10,10)\n    // randomStart()\n\n    // let visualGrid = this.state.grid\n    // visualGrid.map()\n\n\n\n  return (\n    <div className=\"App\">\n      <button onClick={this.handleClick}>Click me</button>\n      <button className={\"randomStart\"} onClick={e => randomStart(e)} > Random Start </button>\n      <button onClick={e => playLife(e)}> start </button>\n      {this.state.grid}\n    </div>\n  );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}