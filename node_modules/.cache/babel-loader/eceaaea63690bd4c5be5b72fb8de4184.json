{"ast":null,"code":"var _jsxFileName = \"/Users/juanbaltazar/Projects/GameOfLife/gameoflife/src/App.js\";\nimport React from 'react';\nimport './App.css';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      this.setState({\n        running: !this.state.running\n      });\n      console.log(this.state.running);\n    };\n\n    this.pupulateArray = (numCol, numRow) => {\n      let array = [];\n\n      for (let i = 0; i < numCol; i++) {\n        let fill = [];\n\n        for (let j = 0; j < numRow; j++) {\n          fill.push({\n            id: `${i}${j}`,\n            state: 0,\n            alive: () => {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: `div div${i}${j}`,\n                backgroundColor: \"blue\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 31,\n                  columnNumber: 13\n                }\n              });\n            },\n            dead: () => {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: `div div${i}${j}`,\n                backgroundColor: \"white\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 35,\n                  columnNumber: 15\n                }\n              });\n            }\n          });\n        }\n\n        array.push(fill);\n      }\n\n      console.log(array);\n      this.setState({\n        grid: array\n      });\n    };\n\n    this.playLife = () => {\n      function sum(col, row) {\n        let cell = this.state.grid;\n        let nTopL = cell[row - 1][col - 1];\n        let nTop = cell[row - 1][col];\n        let nTopR = cell[row - 1][col + 1];\n        let nLeft = cell[row][col - 1];\n        let nRight = cell[row][col + 1];\n        let nBotL = cell[row + 1][col - 1];\n        let nBot = cell[row + 1][col];\n        let nBotR = cell[row + 1][col + 1];\n        const neighbors = [nTopL, nTop, nTopR, nLeft, nRight, nBotL, nBot, nBotR];\n        let sum = 0;\n\n        for (let i = 0; i < neighbors.length; i++) {\n          sum = sum + neighbors[i];\n        }\n\n        return sum;\n      }\n\n      for (let i = 0; i < this.state.grid.length; i++) {\n        for (let j = 0; j < this.state.grid[i][j].length; j++) {\n          let neighbors = sum(i, j); // let array = []\n\n          if (neighbors < 2) {\n            let dead = this.state.grid;\n            dead[i][j].state = 0;\n            console.log(dead[i][j].state);\n            this.setState({\n              grid: dead\n            });\n          }\n\n          if (this.state.grid[i][j].state === 0 && neighbors === 3) {\n            let born = this.state.grid;\n            born[i][j].state = 1;\n            this.setState({\n              grid: born\n            });\n          }\n\n          if (neighbors > 3) {\n            let dead = this.state.grid;\n            dead[i][j].state = 0;\n            this.setState({\n              grid: dead\n            });\n          }\n        }\n      }\n    };\n\n    this.randomStart = () => {\n      for (let i = 0; i < this.state.grid.length; i++) {\n        for (let j = 0; j < this.state.grid[i].length; j++) {\n          let coin = Math.floor(Math.random() * 2);\n          console.log(coin);\n\n          if (coin === 0) {\n            let dead = this.state.grid;\n            dead[i][j].state = 0;\n            this.setState({\n              grid: dead\n            });\n          }\n\n          if (coin === 1) {\n            let alive = this.state.grid;\n            alive[i][j].state = 1;\n            this.setState({\n              grid: alive\n            });\n          }\n        }\n      }\n    };\n\n    this.state = {\n      grid: [],\n      running: false\n    };\n  }\n\n  //16377\n  componentDidMount() {\n    this.pupulateArray(10, 10);\n    this.randomStart();\n  }\n\n  render() {\n    console.log(this.state.grid); //if alive, stays alive if 2 or 3 \n    //if alive, will die if less than 2\n    //if alive, will die if 4 or more\n    //if dead, will be born with exaclty 3 neibohrs\n    // this.playLife()\n\n    let grid = array => {\n      while (this.state.running === !false) {\n        let gridDiv = [];\n\n        for (let i = 0; i < array.length; i++) {\n          let cell = [];\n\n          for (let j = 0; j < array[i].length; j++) {\n            if (array[i][j].state === 1) {\n              cell.push(array[i][j].alive());\n            }\n\n            cell.push(array[i][j].dead());\n          }\n\n          gridDiv.push(cell);\n        }\n\n        console.log(gridDiv);\n        return gridDiv;\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, \"Click me\"), grid(this.state.grid));\n  }\n\n}","map":{"version":3,"sources":["/Users/juanbaltazar/Projects/GameOfLife/gameoflife/src/App.js"],"names":["React","App","Component","constructor","props","handleClick","setState","running","state","console","log","pupulateArray","numCol","numRow","array","i","fill","j","push","id","alive","dead","grid","playLife","sum","col","row","cell","nTopL","nTop","nTopR","nLeft","nRight","nBotL","nBot","nBotR","neighbors","length","born","randomStart","coin","Math","floor","random","componentDidMount","render","gridDiv"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      running: false,\n    }\n  }\n  \n  handleClick = () => {\n    this.setState({\n      running: !this.state.running,\n    })\n    console.log(this.state.running)\n  }\n  pupulateArray = (numCol, numRow) => {\n    let array = []\n    for(let i = 0; i < numCol; i++) {\n      let fill =[]\n      for(let j = 0; j < numRow; j++) {\n        fill.push({\n          id:`${i}${j}`,\n          state: 0,\n          alive: () => {\n          return (\n            <div className={`div div${i}${j}`} backgroundColor=\"blue\"/>\n          )},\n          dead: () => {\n            return (\n              <div className={`div div${i}${j}`} backgroundColor=\"white\"/>\n            )},\n        })\n      }\n      array.push(fill)\n  }\n  console.log(array)\n  this.setState({\n    grid: array,\n  })\n}\n\n\nplayLife = () => {\n\n  function sum(col,row) {\n    let cell = this.state.grid\n    let nTopL = cell[row-1][col-1]\n    let nTop = cell[row-1][col]\n    let nTopR = cell[row-1][col+1]\n    let nLeft = cell[row][col-1]\n    let nRight = cell[row][col+1]\n    let nBotL = cell[row+1][col-1]\n    let nBot = cell[row+1][col]\n    let nBotR = cell[row+1][col+1]\n    const neighbors = [nTopL, nTop, nTopR, nLeft, nRight, nBotL, nBot, nBotR]\n    let sum = 0\n    for(let i = 0; i < neighbors.length; i++) {\n      sum = sum + neighbors[i]\n    }\n    return sum\n  }\n\n  for(let i = 0; i < this.state.grid.length; i++) {\n\n    for(let j = 0; j < this.state.grid[i][j].length; j++) {\n      let neighbors = sum(i,j)\n      // let array = []\n      if(neighbors < 2) {\n        let dead = this.state.grid\n        dead[i][j].state = 0\n        console.log(dead[i][j].state)\n        this.setState({\n          grid: dead\n        })\n      }\n      if(this.state.grid[i][j].state === 0 && neighbors === 3) {\n        let born = this.state.grid\n        born[i][j].state = 1\n        this.setState({\n          grid: born\n        })\n      }\n      if(neighbors > 3) {\n        let dead = this.state.grid\n        dead[i][j].state = 0\n        this.setState({\n          grid: dead\n        })\n      }\n    }\n  }\n\n}\n\nrandomStart = () => {\n  for(let i = 0; i < this.state.grid.length; i++) {\n\n    for(let j = 0; j < this.state.grid[i].length; j++) {\n      let coin = Math.floor(Math.random() * 2);\n      console.log(coin)\n      if(coin === 0) {\n        let dead = this.state.grid\n        dead[i][j].state = 0\n        this.setState({\n          grid: dead,\n        })\n      }\n      if(coin === 1) {\n        let alive = this.state.grid\n        alive[i][j].state = 1\n        this.setState({\n          grid: alive\n      })\n    }\n  }\n}}\n//16377\n\ncomponentDidMount() {\n  this.pupulateArray(10,10)\n  this.randomStart()\n  }\n\n  render() {\n    console.log(this.state.grid)\n    \n    \n\n\n    \n\n    //if alive, stays alive if 2 or 3 \n    //if alive, will die if less than 2\n    //if alive, will die if 4 or more\n    //if dead, will be born with exaclty 3 neibohrs\n\n  // this.playLife()\n  let grid = (array) => {\n    while(this.state.running === !false) {\n      let gridDiv = []\n      for(let i = 0; i < array.length; i++) {\n        let cell = []\n        for(let j = 0; j < array[i].length; j++){\n          if(array[i][j].state === 1) {\n          cell.push(array[i][j].alive())\n          }\n          cell.push(array[i][j].dead())\n        }\n        gridDiv.push(cell)\n      }\n      console.log(gridDiv)\n      return gridDiv\n    }\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={this.handleClick}>Click me</button>\n      {grid(this.state.grid)}\n    </div>\n  );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}